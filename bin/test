#!/usr/bin/env bash

set -eo pipefail

export BUNDLE_PATH="$(pwd)/vendor/bundle"
mkdir -p "$BUNDLE_PATH"

bundle check || bundle install

echo ""
echo "== Lint: =="
bin/lint

target_dir=${1:-$(mktemp -d)}
template_path="$(pwd)/template.rb"

mkdir -p "$target_dir"

cd "$target_dir"
rm -rf test_tmpl

# Test installation of missed gems on applying template
gem uninstall --force --silent oj || true

if [[ "$TEST_APP_TEMPLATE" == "true" ]]
then
  echo "Adds template to existed app"
  rails new test_tmpl --quiet --database postgresql
  cd test_tmpl
  bin/setup
  bin/rails app:template LOCATION="${template_path}"
else
  echo "Generate app with template"
  rails new test_tmpl --template "${template_path}" --quiet --database postgresql
  cd test_tmpl
  bin/setup
fi

echo ""
echo "== Verify CircleCI config =="
circleci config validate

echo ""
echo "== Verify installation scripts =="
bin/tools-setup
bin/tools-upgrade

echo ""
echo "== Verify linters setup =="

git add .
git commit -m 'Initial Commit'
git checkout -b origin/master

git checkout -b test_pr

echo " => class SampleForLinters;end" > sample_for_linters.rb

git add .
git commit -m 'Adds sample_for_linters'

bin/rubocop --fail-level F sample_for_linters.rb
bin/pronto run -c HEAD~1 --no-exit-code
BUNDLE_GEMFILE=Gemfile.tools bin/bundle exec rails_best_practices --without-color --silent --test .

CIRCLECI=false bin/lint-pr -f text

echo ""
echo "== Run git hooks verifications =="
bin/git-hooks/post-merge
CIRCLECI=false bin/git-hooks/pre-push

# For local run only
if [[ -z "$CIRCLECI" ]]
then
  circleci local execute --job test --config .circleci/config.yml
fi
